<?php

namespace AppBundle\Repository;
use AppBundle\Entity\Alert;
use AppBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * AlertRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AlertRepository extends  EntityRepository
{
    /**
     * @param $id
     *
     * @return Alert
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAlertById($id) {
        $qb = $this->createQueryBuilder('alert');
        $qb
            ->andWhere('alert.id = :id')
            ->setParameter('id',$id)
        ;
        return $qb->getQuery()->getSingleResult();
    }
    /**
     * @param $email
     *
     * @return Alert
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function getAlertByUser(User $user) {
        $qb = $this->createQueryBuilder('alert');
        $qb
            ->andWhere('alert.user = :user')
            ->setParameter('user',$user)
            ->addOrderBy("alert.createdAt", 'desc')
        ;
        return $qb->getQuery()->getSingleResult();
    }

    /**
     *
     * @return Alert[]
     */
    public function getAlerts($city, $department, $country, $creator, $status) {
        $qb = $this->createQueryBuilder('alert');
        $qb->innerJoin("alert.userCreator" , "user_creator");
        $qb->leftJoin("alert.userHelpAlerts" , "user_help_alerts");
        $qb->leftJoin("user_help_alerts.user" , "user_helping");

        $qb->addSelect("user_creator");
        $qb->addSelect("user_help_alerts");
        $qb->addSelect("user_helping");
        $qb->addOrderBy("alert.createdAt", 'desc');

        if(! is_null($city)) {
            $qb
                ->andWhere('alert.positionCity = :city')
                ->setParameter('city',$city);
        }
        if(! is_null($department)) {
            $qb
                ->andWhere('alert.positionDep = :dep')
                ->setParameter('dep',$department);
        }
        if(! is_null($country)) {
            $qb
                ->andWhere('alert.positionCountry = :country')
                ->setParameter('country',$country);
        }
        if(! is_null($creator)) {
            $qb
                ->andWhere('alert.userCreator = :creator')
                ->setParameter('creator',$creator);
        }
        if(! is_null($status)) {
            $qb
                ->andWhere('alert.status = :status')
                ->setParameter('status',$status);
        }

        return $qb->getQuery()->getResult();
    }

    public function countDeprecated($id)
    {
        $count = 0;
        $qb = $this->createQueryBuilder('alert');
        $qb
            ->andWhere('alert.id = :id')
            ->setParameter('id',$id)
        ;
        /** @var Alert $alert */
        $alert =  $qb->getQuery()->getSingleResult();

        foreach($alert->getUserHelpAlerts() as $help) {
            if($help->isDeprecated() == true) {
                $count++;
            }
        }

        return $count;
    }

//    private function filterByCityNotNull(QueryBuilder &$qb, $city) {
//        if(! is_null($city)) {
//            $qb
//                ->andWhere('alert.positionCity = :city')
//                ->setParameter('city',$city);
//        }
//    }
//
}
